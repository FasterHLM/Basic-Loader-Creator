# file opened: C:\Users\Faster\Documents\GitHub\Basic-Loader-Creator\sources\blc5_0.asm
  1   0000              //basic loader creator v5.0 (tr-dos/tape editions) for sjasmplus 1.18.3 or newer.
  2   0000              //© 2010-2011, 2013, 2021, 2023 all rights reserved by Faster/HLM.
  3   0000
  4   0000              		device zxspectrum48
  5   0000
  6   0000              		include "./library/ctrl_codes.asm"	//управляющие коды для использования в бейсик-программе
# file opened: ././library/ctrl_codes.asm
  1+  0000              //управляющие коды для использования в бейсик-программе
  2+  0000              BACKSPACE	equ #08 //перемещение позиции печати на одну влево
  3+  0000              INK		equ #10 //код управления цветом тона
  4+  0000              PAPER		equ #11 //код управления цветом фона
  5+  0000              FLASH		equ #12 //код управления мерцанием
  6+  0000              BRIGHT		equ #13 //код управления яркостью
  7+  0000              INVERSE		equ #14 //код управления инверсией
  8+  0000              OVER		equ #15 //код управления наложение
  9+  0000              AT		equ #16 //код управления позицией печати
 10+  0000              TAB		equ #17 //код управления табуляцией
# file closed: ././library/ctrl_codes.asm
  7   0000              		include "./library/sys_vars_48.asm"	//системные переменные Basic sys_vars_48
# file opened: ././library/sys_vars_48.asm
  1+  0000              //системные переменные основного бейсика
  2+  0000              KSTATE  equ #5C00 //#5С00...#5С07 Восемь байт составляют два блока, которые используются программой обслуживания клавиатуры. Для организации работы внешних программ эти переменные практически не применяются
  3+  0000              LAST_K  equ #5C08 //код последней нажатой клавиши
  4+  0000              REPDEL  equ #5C09 //величина задержки (в 1/50 с) между нажатием клавиши и началом автоматического повторения нажатия (автоповтора)
  5+  0000              REPPER  equ #5C0A //период автоповтора (в 1/50 с) при длительном нажатии на клавишу. Изменяя системные переменные REPDEL и REPPER, можно настроить клавиатуру под конкретного пользователя
  6+  0000              DEFADD  equ #5C0B //адрес первого параметра пользовательской функции, определенной оператором DEF FN, в процессе ее обработки
  7+  0000              K_DATA  equ #5C0D //код цвета, заданный цифровой клавишей в режиме курсора Е
  8+  0000              TVDATA  equ #5C0E //первый байт - код управления, заданный цифровой клавишей в режиме курсора Е. Второй байт - первый параметр в AT или TAB
  9+  0000              STRMS   equ #5C10 //#5С10...#5С35 Область хранения информации о потоках
 10+  0000              CHARS   equ #5C36 //адрес размещения текущего набора символов. После запуска компьютера адрес стандартного набора #3C00
 11+  0000                                //поскольку символы с кодами от #00 до #1F являются управляющими и в фонте не определяются, то адрес действительного положения текущего набора на #100 (32x8) больше,
 12+  0000                	          //чем указанный системной переменной CHARS. например, для назначения текущим фонта, расположенного с адреса #FD00, в переменную CHARS необходимо записать число #FC00 (#FD00-#100)
 13+  0000              RASP    equ #5C38 //число, пропорциональное длительности звукового сигнала, предупреждающего о заполнении буфера редактора
 14+  0000              PIP     equ #5C39 //число, пропорциональное длительности звучания сигнала при нажатии на клавишу
 15+  0000              ERR_NR  equ #5C3A //число, на единицу меньшее кода сообщения, выдаваемого при ошибке (включая сообщение о нормальном завершении выполнения программы 0 ОК)
 16+  0000              FLAGS   equ #5C3B //отдельные биты этой переменной используются операционной системой (см. также переменную FLAGS2):
 17+  0000                	          //бит 0 установлен, если не нужно выводить пробел перед бейсик-оператором. (При выводе на экран или печати большинства операторов Бейсика перед ними выводится пробел)
 18+  0000                	          //бит 1 установлен, для вывода используется поток #3 (обычно — принтер)
 19+  0000                	          //бит 2 при вводе символа в режиме курсора L, сброшен при вводе в режиме курсора К
 20+  0000                	          //бит 3 установлен при ожидании ввода символа в режиме курсора L, сброшен при ожидании ввода в режиме К
 21+  0000                	          //бит 4 установлен, если работает расширенный интерпретатор Бейсика в ZX Spectrum 128; при работе в стандартной конфигурации сброшен
 22+  0000                	          //бит 5 устанавливается при нажатии на любую символьную клавишу. Код клавиши можно прочитать из переменной LAST_K
 23+  0000                	          //бит 6 установлен при обработке числового выражения, сброшен при обработке символьного
 24+  0000                	          //бит 7 установлен при выполнении программы, сброшен при проверке синтаксиса введенной строки
 25+  0000              TV_FLAG equ #5C3C //отдельные биты этой переменной используются для управления выводом на экран:
 26+  0000                	          //бит 0 установлен при выводе на служебный экран, сброшен при выводе наосновной экран
 27+  0000                	          //бит 3 установлен, если режим вывода на экран мог измениться и требуется проверка режима
 28+  0000                	          //бит 4 установлен при выводе листинга программы
 29+  0000                	          //бит 5 установлен при необходимости очистить служебный экран (например, перед выводом сообщения)
 30+  0000              ERR_SP  equ #5C3D //адрес, на который устанавливается указатель стека при запуске программы обработки ошибок. Изменив значение переменной, можно подключить собственные процедуры обработки ошибок
 31+  0000              LIST_SP equ #5C3F //сохраняет адрес вершины стека в процессе вывода листинга программы
 32+  0000              MODE    equ #5C41 //число, определяющее режим ввода с клавиатуры:
 33+  0000                	          //0 — очередной символ вводится в режимах курсора К, L или С
 34+  0000                	          //1 — очередной символ вводится в режиме курсора Е
 35+  0000                                //2 и более — очередной и последующие символы вводятся в режиме курсора G
 36+  0000                	          //при значении, превышающем 2, меняется внешний вид курсора
 37+  0000              NEWPPC  equ #5C42 //номер строки бейсик-программы, в которой расположен следующий выполняемый оператор
 38+  0000              NSPPS   equ #5C44 //номер следующего зыполняемого оператора в строке бейсик-программы
 39+  0000                 	          //переменные NEWPPC и NSPPS можно использовать для перехода к произвольному оператору в бейсик-программе
 40+  0000              PPC     equ #5C45 //номер строки бейсик-программы, в которой расположен выполняемый оператор
 41+  0000                	          //при выполнении оператора в непосредственном режиме в переменную записано число #FFFE
 42+  0000              SUBPPC  equ #5C47 //номер выполняемого оператора в строке бейсик-программы
 43+  0000              BORDCR  equ #5C48 //атрибуты служебного экрана. Цветом фона служебного экрана определяется цвет бордюра
 44+  0000              E_PPC   equ #5C49 //номер строки бейсик-программы, отмеченной курсором
 45+  0000              VARS    equ #5C4B //адрес начала области переменных бейсик-программы
 46+  0000              DEST    equ #5C4D //адрес первого символа имени обрабатываемой в данный момент переменной
 47+  0000              CHANS   equ #5C4F //адрес начала области информации о каналах
 48+  0000              CURCHL  equ #5C51 //адрес первого байта описателя текущего канала в области информации о каналах
 49+  0000              PROG    equ #5C53 //адрес начала бейсик-программы. Вычитанием значения системной переменной VARS из значения PROG, вычисляется длина бейсик-программы
 50+  0000              NXTLIN  equ #5C55 //адрес начала следующей строки бейсик-программы
 51+  0000              DATADD  equ #5C57 //адрес последнего считанного оператором READ  объекта данных в операторах DATA
 52+  0000              E_LINE  equ #5C59 //адрес начала редактируемой строки
 53+  0000              K_CUR   equ #5C5B //адрес символа редактируемой строки, на который установлен курсор
 54+  0000              CH_ADD  equ #5C5D //адрес следующего обрабатываемого символа в бейсик-программе. Переменная может быть полезна при использовании внешних процедур обработки синтаксиса
 55+  0000              X_PTR   equ #5C5F //адрес символа бейсик-строки, вслед за которым установлен знак ? при обнаружении синтаксической ошибки. В операциях, не связанных с проверкой синтаксиса,
 56+  0000                	          //переменная может использоваться компьютером для временного хранения другой служебной информации
 57+  0000              WORKSP  equ #5C61 //адрес начала рабочей области бейсик-программы
 58+  0000              STKBOT  equ #5C63 //адрес начала стека калькулятора
 59+  0000              STKEND  equ #5C65 //адрес вершины стека калькулятора
 60+  0000              BREG    equ #5C67 //регистр В калькулятора
 61+  0000              MEM     equ #5C68 //адрес области памяти, используемой калькулятором. Как правило, для этих целей используется системная область МЕМВОТ
 62+  0000              FLAGS2  equ #5C6A //отдельные биты этой переменной используются операционной системой (см. также переменную FLAGS)
 63+  0000                	          //бит 0 установлен при необходимости очистить основной экран после ввода строки
 64+  0000                	          //бит 1 установлен, если буфер принтера уже использовался
 65+  0000                	          //бит 2 установлен, если основной экран очищен
 66+  0000                	          //бит 3 установлен при использовании режима курсора С, сброшен при использовании режима курсора L. Изменением состояния этого бита можно программно устанавливать режимы регистров клавиатуры С или L
 67+  0000                	          //бит 4 установлен при использовании режима курсора К
 68+  0000                	          //биты 5,6,7 используются интерфейсом ZX-LPRINT III (при наличии такового)
 69+  0000              DF_SZ   equ #5C6B //количество строк в служебном экране. Число строк в основном экране может быть увеличено до максимума (24 строки) выполнением оператора РОКЕ 23659,0
 70+  0000                	          //однако, если количество строк в служебном экране меньше 2, то при попытке вывода на него любого сообщения, например, OK или BREAK—CONT repeats,
 71+  0000                	          //система будет вести себя самым неприличным образом. Запись в DF_SZ нуля — один из способов защиты бейсик-npoгpaмм от останова
 72+  0000              S_TOP   equ #5C6C //номер строки бейсик-программы, начиная с которой выводится автоматический листинг (по нажатию клавиши Enter)
 73+  0000              OLDPPC  equ #5C6E //номер строки бейсик-программы, начиная с которой будет продолжено выполнение программы после ввода оператора CONTINUE
 74+  0000              OSPCC   equ #5C70 //номер оператора в строке бейсик-программы, начиная с которого будет продолжено выполнение программы после ввода оператора CONTINUE
 75+  0000              FLAGX   equ #5C71 //используется при обработке оператора INPUT
 76+  0000                	          //бит 1 установлен, если оператором INPUT вводится новая переменная
 77+  0000                	          //бит 5 установлен при работе в режиме ввода оператором INPUT, сброшен — в режиме редактирования бейсик-строки
 78+  0000                	          //бит 6 установлен при обработке строки, введенной оператором INPUT
 79+  0000                	          //бит 7 установлен, если выполняется оператор INPUT LINE
 80+  0000              STRLEN  equ #5C72 //длина обрабатываемой символьной переменной (ранее определенной) либо идентификатор числовой или новой символьной переменной (младший байт)
 81+  0000              T_ADDR  equ #5C74 //адрес следующего элемента в таблицах синтаксиса, расположенных в ПЗУ
 82+  0000              SEED    equ #5C76 //значение, используемое для вычисления псевдослучайного числа. После выполнения оператора RANDOMIZE, переменная SEED изменяется в соответствии со введенным параметром.
 83+  0000                		  //если RANDOMIZE использовался без параметров, то в переменную SEED копируются два младших байта из переменной FRAMES
 84+  0000              FRAMES  equ #5C78 //#5C78/79/7A Системный счетчик. После запуска (сброса) компьютера обнуляется
 85+  0000                		  //при работе со стандартной процедурой обработки прерываний значение счетчика каждые 1/50 секунды увеличивается на единицу
 86+  0000              UDG     equ #5C7B //адрес начала области, используемой для размещения определяемых пользователем символов
 87+  0000              COORDS  equ #5C7D //координаты X и Y последней изображенной на экране точки
 88+  0000              P_POSN  equ #5C7F //содержит значение 33—n, где n — номер следующей позиции печати в буфере принтера
 89+  0000              PR_CC   equ #5C80 //младший байт адреса области, используемой в текущий момент под буфер принтера
 90+  0000              NOT_USED equ #5C81 //в большинстве описаний эта переменная характеризуется как неиспользуемая (о чем говорит ее название),
 91+  0000                	          //но в действительности она содержит старший байт адреса области, используемой в текущий момент под буфер принтера
 92+  0000                	          //при выводе на ZX Printer операционная система подготавливает строку к печати в буфере, расположенном по адресу, указанному переменными PR_CC и NOT_USED
 93+  0000              ECHO_E  equ #5C82 //позиция (номер строки и колонка) следующего символа вводимой бейсик-строки
 94+  0000              DF_CC   equ #5C84 //адрес байта, соответствующего верхней линии точек знакоместа основного экрана, в которое будет осуществлен вывод следующего символа
 95+  0000              DFCCL   equ #5C86 //адрес байта, соответствующего верхней линии точек знакоместа служебного экрана, в которое будет осуществлен вывод следующего символа
 96+  0000              S_POSN  equ #5C88 //координаты следующей позиции вывода на основной экран. Координаты хранятся в виде: 24—nr, 33-nc, где nr — номер строки, пс — номер столбца
 97+  0000              SPONSL  equ #5C8A //координаты следующей позиции вывода на служебный экран
 98+  0000              SCR_CT  equ #5C8C //число, на единицу большее количества строк, передвигаемых по экрану вверх без запроса scroll?
 99+  0000                	          //изменением содержимого этой ячейки можно добиться безостановочного скроллинга экрана при выводе текста
100+  0000              ATTR_P  equ #5C8D //постоянные атрибуты экрана, задаваемые операторами PAPER, INK, FLASH и BRIGHT
101+  0000              MASK_P  equ #5C8E //маска для разделения постоянных (ATTR_T) и текущих атрибутов при выводе на экран. Если в MASK_P бит установлен, то соответствующий бит атрибута при выводе на экран не изменяется
102+  0000              ATTR_T  equ #5C8F //временные атрибуты, используемые при выводе на экран, например, оператором PRINT INK 7// PAPER 1//"..."
103+  0000              MASK_T  equ #5C90 //маска для разделения временных (ATTR_P) и текущих атрибутов при выводе на экран
104+  0000              P_FLAG  equ #5C91 //параметры вывода на экран. Четные биты используются для постоянных параметров, нечетные — для временных:
105+  0000                	          //бит 0/1 установлен при использовании OVER 1
106+  0000                	          //бит 2/3 установлен при использовании INVERSE 1
107+  0000                	          //бит 4/5 установлен при использовании INK 9
108+  0000                	          //бит 6/7 установлен при использовании PAPER 9
109+  0000              MEMBOT  equ #5C92 //#5C92...#5CAF Область, используемая калькулятором для размещения значений, которые неудобно обрабатывать через стек калькулятора
110+  0000              NMIADD  equ #5CB0 //не используется. Авторы системы, очевидно, предполагали задействовать эту системную переменную для обслуживания немаскируемых прерываний,
111+  0000                	          //но из-за допущенной неточности переменная действительно оказалась неиспользуемой. Интерфейсы некоторых внешних устройств задействуют эту переменную
112+  0000                	          //например, интерфейс принтера ZX Lprint III хранит в ней значение скорости обмена по последовательному каналу
113+  0000              RAMTOP  equ #5CB2 //последний адрес в ОЗУ, разрешенный к использованию интерпретатором Бейсика. Устанавливается оператором CLEAR
114+  0000              P_RAMT  equ #5CB4 //адрес последнего байта физического ОЗУ. Устанавливается при инициализации компьютера после теста доступной памяти
115+  0000                	          //в исправном компьютере с объемом оперативной памяти 48К переменная должна содержать значение #FFFF
# file closed: ././library/sys_vars_48.asm
  8   0000              		include "./library/basic_line_v2.asm"	//1 - RUN USR X [LET X = Start_Address] (TR-DOS)
# file opened: ././library/basic_line_v2.asm
  1+  0000              //вариант формата бейсик-строки в бейсик-программе
  2+  0000              //RUN USR VAL "PEEK 23628*256+PEEK 23627" (TR-DOS/TAPE)
  3+  0000
  4+  0000                      	macro BasicLineCode
  5+  0000 ~            		dh f7c0					//RUN USR
  6+  0000 ~            		dh B022BE32333632382A			//VAL "PEEK 23628*
  7+  0000 ~            		if HiddenLine
  8+  0000 ~            		dup 26
  9+  0000 ~            		db BACKSPACE
 10+  0000 ~            		edup
 11+  0000 ~            		dup 26+3				//+3 байта, для переноса числа 256 на другую строку
 12+  0000 ~            		db " "
 13+  0000 ~            		edup
 14+  0000 ~            		endif
 15+  0000 ~            		dh 3235362BBE323336323722		//256+PEEK 23627"
 16+  0000 ~            		if HiddenLine
 17+  0000 ~            		dup 15					//длина 256+PEEK 23627"
 18+  0000 ~            		db BACKSPACE
 19+  0000 ~            		edup
 20+  0000 ~            		dup 15
 21+  0000 ~            		db " "
 22+  0000 ~            		edup
 23+  0000 ~            		endif
 24+  0000 ~
 25+  0000 ~            		if CopyrightLine			//отображение текстового сообщения в бейсик-строке
 26+  0000 ~            		db ":",BACKSPACE," "			//отделяем команду символом ":" и скрываем символ
 27+  0000 ~            		CopyrightText
 28+  0000 ~            		endif
 29+  0000 ~
 30+  0000 ~            //		dh 10ff					//вводим ошибочное значение INK, чтобы скрыть дальнейшее отображение листинга
 31+  0000 ~            		dh 0d					//конец бейсик-строки
 32+  0000 ~            BasicVariables
 33+  0000              		endm
# file closed: ././library/basic_line_v2.asm
  9   0000              							//2 - RUN USR VAL "PEEK 23628*256+PEEK 23627" (TR-DOS/TAPE)
 10   0000              							//3 - пользовательский вариант
 11   0000
 12   0000              MergeProtect	equ 0					//0|1 - выкл/вкл защита от комадны MERGE
 13   0000              HiddenLine	equ 0					//0|1 - выкл/вкл отображения листинга бейсик-строки
 14   0000              CopyrightLine	equ 0					//0|1 - выкл/вкл текстового сообщения в бейсик-строке
 15   0000
 16   0000              NumberLine	equ 0					//номер бейсик-строки
 17   0000              StartLine	equ NumberLine				//номер строки автостарта
 18   0000              VarSymbol	equ "X"|#20				//символ для RUN USR приведенный к нижнему регистру
 19   0000
 20   0000              		macro CopyrightText			//текст сообщения в бейсик-строке
 21   0000 ~            		db AT,0,0				//позиция вывода сообщения на экран
 22   0000 ~            		db BRIGHT,0,PAPER,0,INK,4
 23   0000 ~            		db "    Basic Loader Creator 5.0    "
 24   0000 ~            		db INK,6
 25   0000 ~            		db "  (c) 04.12.2023 by Faster/HLM  "
 26   0000              		endm
 27   0000
 28   0000              		org #5d3b				//начало бейсик-программы (#5d3b - для TR-DOS, #5ccb - для +3DOS/TAPE)
 29   5D3B
 30   5D3B 00 00        BasicFileStart	db high NumberLine,low NumberLine	//2 байта номера бейсик-строки
 31   5D3D
 32   5D3D              		if MergeProtect				//2 байта длины бейсик-строки
 33   5D3D ~            		dw #ffff				//фальшивая длина строки
 34   5D3D              		else
 35   5D3D 17 00        		dw BasicVariables-BasicProg		//реальная длина строки
 36   5D3F              		endif
 37   5D3F              BasicProg
 38   5D3F              		BasicLineCode
 38   5D3F F7 C0       >		dh f7c0					//RUN USR
 38   5D41 B0 22 BE 32 >		dh B022BE32333632382A			//VAL "PEEK 23628*
 38   5D45 33 36 32 38 >
 38   5D49 2A          >
 38   5D4A             >		if HiddenLine
 38   5D4A ~           >		dup 26
 38   5D4A ~           >		db BACKSPACE
 38   5D4A ~           >		edup
 38   5D4A ~           >		dup 26+3				//+3 байта, для переноса числа 256 на другую строку
 38   5D4A ~           >		db " "
 38   5D4A ~           >		edup
 38   5D4A             >		endif
 38   5D4A 32 35 36 2B >		dh 3235362BBE323336323722		//256+PEEK 23627"
 38   5D4E BE 32 33 36 >
 38   5D52 32 37 22    >
 38   5D55             >		if HiddenLine
 38   5D55 ~           >		dup 15					//длина 256+PEEK 23627"
 38   5D55 ~           >		db BACKSPACE
 38   5D55 ~           >		edup
 38   5D55 ~           >		dup 15
 38   5D55 ~           >		db " "
 38   5D55 ~           >		edup
 38   5D55             >		endif
 38   5D55             >
 38   5D55             >		if CopyrightLine			//отображение текстового сообщения в бейсик-строке
 38   5D55 ~           >		db ":",BACKSPACE," "			//отделяем команду символом ":" и скрываем символ
 38   5D55 ~           >		CopyrightText
 38   5D55             >		endif
 38   5D55             >
 38   5D55             >//		dh 10ff					//вводим ошибочное значение INK, чтобы скрыть дальнейшее отображение листинга
 38   5D55 0D          >		dh 0d					//конец бейсик-строки
 38   5D56             >BasicVariables
 39   5D56
 40   5D56              Code		include	"./sources/code_loader.asm"	//код загрузчика
# file opened: ././sources/code_loader.asm
  1+  5D56              //Code loader для Basic загрузчика
  2+  5D56 FB           		ei
  3+  5D57 3A 53 5C     		ld a,(PROG)				//проверяем запущена ли программа в TR-DOS
  4+  5D5A FE 3B        		cp #3b
  5+  5D5C 28 05        		jr z,TRDOS				//запущена в TR-DOS
  6+  5D5E 3E 01        Tape		ld a,#01
  7+  5D60 D3 FE        		out (#fe),a
  8+  5D62 C9           		ret
  9+  5D63
 10+  5D63 3E 02        TRDOS		ld a,#02
 11+  5D65 D3 FE        		out (#fe),a
 12+  5D67 C9           		ret
# file closed: ././sources/code_loader.asm
 41   5D68
 42   5D68              BasicFileEnd
 43   5D68              		display	' '
 44   5D68              		display 'Basic loader address: ',/a,BasicFileStart
 45   5D68              		display 'Start code: ',/a,Code
 46   5D68              		display 'Length code: ',/a,(BasicFileEnd-BasicFileStart)-(BasicVariables-BasicFileStart)
 47   5D68              		display	' '
 48   5D68              		display	'Catalogue info: Start (basic file length): ',/d,BasicFileEnd-BasicFileStart
 49   5D68              		display	'Catalogue info: Length (basic program length): ',/d,BasicVariables-BasicFileStart
 50   5D68              		display 'Length in sectors: ',/d,low (BasicFileEnd-BasicFileStart)/#100+1
 51   5D68              		display 'Free space for a hidden message: ',/a,#100*(low (BasicFileEnd-BasicFileStart)/#100+1)-(BasicFileEnd-BasicFileStart+2)
 52   5D68              		display	' '
 53   5D68
 54   5D68              		if (0 = 0 && 0 = 0)
 55   5D68              		labelslist 'c:\Users\Faster\Documents\Unreal\user.l'
 56   5D68
 57   5D68              		emptytrd 'BLC5_0.trd'
 58   5D68              		savetrd 'BLC5_0.trd',|'boot.B',BasicFileStart,BasicFileEnd-BasicFileStart,NumberLine,BasicVariables-BasicFileStart
 59   5D68
 60   5D68              		emptytap "BLC5_0.tap"
 61   5D68              		savetap "BLC5_0.tap",BASIC,'boot',BasicFileStart,BasicFileEnd-BasicFileStart,NumberLine,BasicVariables-BasicFileStart
 62   5D68
 63   5D68              		shellexec 'c:\Users\Faster\Documents\Unreal\unreal.exe ./BLC5_0.trd'
 64   5D68              		endif
# file closed: C:\Users\Faster\Documents\GitHub\Basic-Loader-Creator\sources\blc5_0.asm
